print("Security verification passed. Loading Eco Hub...")

local Success, Error = pcall(function()
    local NO_HOOKING = false
    local Debugging = true

    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TweenService = game:GetService("TweenService")
    local VirtualInputManager = game:GetService("VirtualInputManager")
    local VirtualUser = game:GetService("VirtualUser")
    local StarterGui = game:GetService("StarterGui")
    local CoreGui = game:GetService("CoreGui")
    local GuiService = game:GetService("GuiService")
    local CollectionService = game:GetService("CollectionService")
    local UserInputService = game:GetService("UserInputService")
    local Lighting = game:GetService("Lighting")
    local TeleportService = game:GetService("TeleportService")
    local VeryImportantPart = Instance.new("Part")
    
    local Toasts = loadstring(game:HttpGet("https://you.whimper.xyz/sources/NoxHub/toast.lua"))()

    do
        VeryImportantPart.Name = "SpawnBox"
        local prio = Instance.new("IntValue", VeryImportantPart)
        prio.Name = "priority"
        prio.Value = 10
        local name = Instance.new("StringValue", VeryImportantPart)
        name.Name = "zonename"
        name.Value = "???"
    end

    local Camera = workspace.CurrentCamera
    local ZoneFishOrigin
    local PreAutoloadConfig = true

    local State = {
        GettingMeteor = false,
        OwnedBoats = {},
        LastToolReset = os.clock(),
        ToolResetCooldown = 5,
    }

    local GlobalStorage = {
        PeakZones = {
            ["Overgrowth Caves"] = true,
            ["Frigid Cavern"] = true,
            ["Cryogenic Canal"] = true,
            ["Glacial Grotto"] = true,
        },
    }

    local LocalPlayer = Players.LocalPlayer
    local Unloaded = false
    local CurrentTool

    if not (hookfunction and hookmetamethod) then
        hookfunction = function(...) end
        hookmetamethod = function(...) end
        NO_HOOKING = true
    end

    if not getconnections then
        getconnections = function(...) end
    end

    if not setthreadidentity then
        setthreadidentity = function(...) end
    end
    
    if not replicatesignal then
        replicatesignal = nil
    end

    local function dbgprint(...)
        if Debugging then
            print("[Debugging]", ...)
        end
    end

    local function dbgwarn(...)
        if Debugging then
            warn("[Debugging]", ...)
        end
    end

    local function WaitForTable(Root, InstancePath, Timeout)
        local Instance = Root
        for i, v in pairs(InstancePath) do
            local child = Instance:WaitForChild(v, Timeout or 10)
            if not child then
                warn("Failed to find child:", v, "in", Instance:GetFullName())
                return nil
            end
            Instance = child
        end
        return Instance
    end

    local function GetFirstAncestorOfClass(Object, Class)
        local Ancestor = Object.Parent
        local Depth = 0
        while Ancestor do
            Depth = Depth + 1
            if Depth > 255 then
                warn("Aborted GetFirstAncestorOfClass: Too deep")
                return nil
            end
            if Ancestor:IsA(Class) then
                return Ancestor
            end
            Ancestor = Ancestor.Parent
        end
        return nil
    end

    local function LockPersistent(Object)
        assert(Object:IsA("Model"), "Object must be a model")
        if Object.ModelStreamingMode ~= Enum.ModelStreamingMode.Persistent then
            CollectionService:AddTag(Object, "ForcePersistent")
            Object:SetAttribute("OldStreamingMode", Object.ModelStreamingMode.Name)
            Object.ModelStreamingMode = Enum.ModelStreamingMode.Persistent
        end
    end

    local function EnsureStream(Root, InstancePath, Position, Timeout)
        LocalPlayer:RequestStreamAroundAsync(Position, Timeout)
        local Target = WaitForTable(Root, InstancePath, Timeout)
        local Model = GetFirstAncestorOfClass(Target, "Model")
        if Model then
            LockPersistent(Model)
        end
        return Target
    end

    local function EnsureInstance(Instance)
        return (Instance and Instance:IsDescendantOf(game))
    end

    local Configuration = {
        CheckSafeRange = 50,
    }

    -- FIX: Removido espa√ßo extra no nome do remote
    local Remotes = {
        ReelFinished = ReplicatedStorage.events:WaitForChild("reelfinished"),
        SellAll = ReplicatedStorage.events:WaitForChild("SellAll"),
        Power = EnsureStream(workspace, {"world", "npcs", "Merlin", "Merlin", "power"}, Vector3.new(-930, 226, -993), 5),
        Luck = EnsureStream(workspace, {"world", "npcs", "Merlin", "Merlin", "luck"}, Vector3.new(-930, 226, -993), 5),
    }

    local Interface = {
        FishRadar = ReplicatedStorage.resources.items.items["Fish Radar"]["Fish Radar"],
        TeleportSpots = WaitForTable(workspace, {"world", "spawns", "TpSpots"}, 10),
        MeteorItems = workspace:WaitForChild("active", 10):WaitForChild("meteorItems", 10),
        PlayerData = workspace:WaitForChild("PlayerStats", 10):WaitForChild(LocalPlayer.Name, 10):WaitForChild("T", 10):GetChildren()[1],
        NPCs = workspace:WaitForChild("world", 10):WaitForChild("npcs", 10),
        BoatModels = WaitForTable(ReplicatedStorage, {"resources", "replicated", "instances", "vessels"}, 10),
        Active = workspace:WaitForChild("active", 10),
        ActiveBoats = workspace:WaitForChild("active", 10):WaitForChild("boats", 10),
    }
    
    -- Wait for Inventory separately with retry logic
    task.spawn(function()
        local attempts = 0
        while attempts < 5 do
            local hud = LocalPlayer.PlayerGui:WaitForChild("hud", 5)
            if hud then
                local safezone = hud:WaitForChild("safezone", 5)
                if safezone then
                    local backpack = safezone:WaitForChild("backpack", 5)
                    if backpack then
                        Interface.Inventory = backpack
                        break
                    end
                end
            end
            attempts = attempts + 1
            task.wait(2)
        end
        
        if not Interface.Inventory then
            warn("Could not load inventory UI after 5 attempts")
        end
    end)

    local Collection = {}
    local OnUnload = Instance.new("BindableEvent")
    
    local function Collect(Item)
        table.insert(Collection, Item)
    end

    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

    local Window = Rayfield:CreateWindow({
        Name = "Eco Hub - Fisch",
        LoadingTitle = "Painel carregando..",
        LoadingSubtitle = "by rip_sheldoohz",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "EcoHub",
            FileName = "FischConfig"
        },
        Discord = {
            Enabled = false,
            Invite = "",
            RememberJoins = false
        },
        KeySystem = false,
    })

    local Tabs = {
        Main = Window:CreateTab("Main", 4483362458),
        Autos = Window:CreateTab("Autos", 4483362458),
        Teleports = Window:CreateTab("Teleports", 4483362458),
        Misc = Window:CreateTab("Misc", 4483362458),
    }

    local Utils = {}
    do
        function Utils.CountInstances(Parent, Name)
            local Count = 0
            for _, Instance in next, Parent:GetChildren() do
                if Instance.Name == Name then
                    Count = Count + 1
                end
            end
            return Count
        end

        function Utils.BreakVelocity(self)
            if LocalPlayer.Character then
                task.spawn(function()
                    for i = 20, 1, -1 do
                        RunService.Heartbeat:Wait()
                        for _, Part in next, LocalPlayer.Character:GetDescendants() do
                            if Part:IsA("BasePart") then
                                Part.Velocity = Vector3.new(0, 0, 0)
                                Part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                            end
                        end
                    end
                end)
            end
        end

        function Utils.ToggleLocationCC(Value)
            local LocationCC = Lighting:FindFirstChild("location")
            if LocationCC then
                LocationCC.Enabled = Value
            end
        end

        function Utils.GameNotify(Message)
            ReplicatedStorage.events.anno_localthoughtbig:Fire(Message, nil, nil, nil, "Exotic")
        end

        function Utils.GetCharacters()
            local Characters = {}
            for _, Player in next, Players:GetPlayers() do
                if Player.Character then
                    table.insert(Characters, Player.Character)
                end
            end
            return Characters
        end

        function Utils.Net(Type, Index)
            return ReplicatedStorage.packages.Net:FindFirstChild(Type .. "/" .. Index)
        end

        function Utils.Character()
            return LocalPlayer.Character
        end

        function Utils.Humanoid()
            local Character = Utils.Character()
            if Character then
                return Character:FindFirstChildOfClass("Humanoid")
            end
            return nil
        end

        function Utils.CastTo(A, B, Params)
            local Direction = (B - A)
            return workspace:Raycast(A, Direction, Params)
        end

        function Utils.SafePosition(Position, Range)
            local Characters = Utils.GetCharacters()
            local RayParams = RaycastParams.new()
            RayParams.FilterType = Enum.RaycastFilterType.Exclude
            RayParams.RespectCanCollide = true
            RayParams.FilterDescendantsInstances = Characters

            for _, Character in next, Characters do
                local Head = Character:FindFirstChild("Head")
                local Pivot = Character:GetPivot()

                if Head then
                    local Raycast = Utils.CastTo(Position, Head.Position, RayParams)
                    if Raycast then
                        return false
                    end
                end

                if Pivot then
                    local Distance = (Position - Pivot.Position).Magnitude * 0.5
                    if Distance <= Range then
                        return false
                    end
                end
            end
            return true
        end

        function Utils.TP(Target, CheckSafe)
            local Pivot
            if typeof(Target) == "CFrame" then
                Pivot = Target
            elseif typeof(Target) == "Vector3" then
                Pivot = CFrame.new(Target)
            elseif typeof(Target) == "PVInstance" then
                Pivot = Target:GetPivot()
            elseif typeof(Target) == "BasePart" then
                Pivot = Target:GetPivot()
            elseif typeof(Target) == "Model" then
                Pivot = Target:GetPivot()
            end

            if CheckSafe then
                if not Utils.SafePosition(Pivot.Position, Configuration.CheckSafeRange) then
                    return false
                end
            end

            local Character = Utils.Character()
            if Character then
                Character:PivotTo(Pivot)
                return true
            end
            return false
        end

        function Utils.EliminateVelocity(Model)
            for _, Part in next, Model:GetDescendants() do
                if Part:IsA("BasePart") then
                    Part.Velocity = Vector3.new(0, 0, 0)
                    Part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                end
            end
            return nil
        end

        function Utils.GenericToast(Duration, Message, CustomTitle)
            local MessageTitle = CustomTitle or "Eco Hub"
            Toasts.CreateToast(
                HttpService:GenerateGUID(false),
                MessageTitle,
                Message,
                "rbxassetid://18259985431",
                Duration
            )
        end

        function Utils.GetUsernameMatch(PartialName)
            local BestMatch
            local BestMatchLength = 0

            for _, Player in next, Players:GetPlayers() do
                if string.find(Player.Name:lower(), PartialName:lower()) then
                    if #Player.Name > BestMatchLength then
                        BestMatch = Player
                        BestMatchLength = #Player.Name
                    end
                end
            end
            return BestMatch
        end

        function Utils.CharacterChildAdded(Child)
            if Child:IsA("Tool") then
                CurrentTool = Child
                if getgenv().ServerStresser then
                    local FishModel = Child:WaitForChild("Fish", 1)
                    if FishModel then
                        FishModel:Destroy()
                    end
                    task.delay(0.5, function()
                        for i, v in next, Child:GetDescendants() do
                            if v:IsA("BasePart") then
                                v.Anchored = true
                            end
                        end
                    end)
                end
            elseif Child:IsA("Humanoid") then
                Collect(Child.StateChanged:Connect(function()
                    if getgenv().ZoneFish then
                        for _, State in next, Enum.HumanoidStateType:GetEnumItems() do
                            if State ~= Enum.HumanoidStateType.Running then
                                Child:SetStateEnabled(State, false)
                            end
                        end
                        Child:ChangeState(Enum.HumanoidStateType.Running)
                    end
                end))
                Collect(Child.Died:Once(function()
                    getgenv().ZoneFish = false
                end))
            end
        end

        function Utils.CharacterChildRemoved(Child)
            if Child:IsA("Tool") then
                CurrentTool = nil
            end
        end

        function Utils.CharacterAdded(Character)
            for _, Child in next, Character:GetChildren() do
                Utils.CharacterChildAdded(Child)
            end

            Collect(Character.ChildAdded:Connect(Utils.CharacterChildAdded))
            Collect(Character.ChildRemoved:Connect(Utils.CharacterChildRemoved))

            local Zone = Character:WaitForChild("zone", 1)
            if Zone then
                Collect(RunService.RenderStepped:Connect(function()
                    if getgenv().DisablePeakEffects then
                        Zone.Value = VeryImportantPart
                    end
                end))
            end
        end

        function Utils.Capitalize(String)
            return string.upper(string.sub(String, 1, 1)) .. string.sub(String, 2)
        end

        function Utils.GetNPC(Type, Single)
            local function GetNPCType(NPC)
                local NPCType = "Unknown"
                if NPC:FindFirstChild("shipwright") then
                    NPCType = "Shipwright"
                elseif NPC:FindFirstChild("merchant") then
                    NPCType = "Merchant"
                elseif NPC:FindFirstChild("angler") then
                    NPCType = "Angler"
                end
                return NPCType
            end

            local NPCs = Interface.NPCs:GetChildren()
            local Results = {}

            for _, Character in next, NPCs do
                local NPCType = GetNPCType(Character)
                if NPCType == Type then
                    if Single then
                        return Character
                    else
                        table.insert(Results, Character)
                    end
                end
            end
            return nil
        end

        function Utils.BoatsChanged()
            local Boats = Interface.PlayerData.Boats:GetChildren()
            State.OwnedBoats = {}
            for _, Boat in next, Boats do
                table.insert(State.OwnedBoats, Boat.Name)
            end
        end
    end

    local TeleportLocations = {}
    local TeleportLocations_DropDownValues = {}

    for _, Location in next, Interface.TeleportSpots:GetChildren() do
        TeleportLocations[Utils.Capitalize(Location.Name)] = Location.Position + Vector3.new(0, 6, 0)
    end

    for Name, Position in next, TeleportLocations do
        table.insert(TeleportLocations_DropDownValues, Name)
    end

    table.sort(TeleportLocations_DropDownValues)

    local FishingZones = {}
    for _, Zone in next, workspace:WaitForChild("zones"):WaitForChild("fishing"):GetChildren() do
        if not FishingZones[Zone.Name] then
            FishingZones[Zone.Name] = Zone
        end
    end

    local FishingZones_DropDownValues = {}
    for Name, Zone in next, FishingZones do
        table.insert(FishingZones_DropDownValues, Name)
    end

    local function ResetTool()
        if CurrentTool then
            local ToolCache = LocalPlayer.Character:FindFirstChildOfClass("Tool")
            if CurrentTool then
                if State.LastToolReset + State.ToolResetCooldown < os.clock() then
                    State.LastToolReset = os.clock()
                    LocalPlayer.Character.Humanoid:UnequipTools()
                    task.wait()
                    if ToolCache then
                        ToolCache.Parent = LocalPlayer.Character
                    end
                end
            end
        end
    end

    Tabs.Main:CreateSection("Movement")

    local localPlayer = Players.LocalPlayer
    local camera = workspace.CurrentCamera
    local toggles = {
        EnableSpeedHack = false,
        EnableFlight = false,
    }
    local options = {
        Speed = 100,
        FlightSpeed = 150,
    }
    local infiniteJumpConnection = nil

    local function handleSpeedHack()
        local function initSpeedHack()
            local character = localPlayer.Character
            if character then
                local hrp = character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    local bv = hrp:FindFirstChild("SpeedHackVelocity")
                    if not bv then
                        bv = Instance.new("BodyVelocity")
                        bv.Name = "SpeedHackVelocity"
                        bv.MaxForce = Vector3.new(1e5, 0, 1e5)
                        bv.Velocity = Vector3.new(0, 0, 0)
                        bv.Parent = hrp
                    end
                    return bv
                end
            end
            return nil
        end
        
        local bv = initSpeedHack()
        while not bv and toggles.EnableSpeedHack do
            task.wait(0.1)
            bv = initSpeedHack()
        end
        
        while toggles.EnableSpeedHack and localPlayer and localPlayer.Character do
            local character = localPlayer.Character
            local hrp = character and character:FindFirstChild("HumanoidRootPart")
            if hrp then
                camera = workspace.CurrentCamera
                local moveDirection = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end
                if moveDirection.Magnitude > 0 then
                    moveDirection = moveDirection.Unit * options.Speed
                else
                    moveDirection = Vector3.new(0, 0, 0)
                end
                if bv then
                    bv.Velocity = Vector3.new(moveDirection.X, 0, moveDirection.Z)
                end
            end
            task.wait()
        end
        
        if localPlayer and localPlayer.Character then
            local hrp = localPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local oldBV = hrp:FindFirstChild("SpeedHackVelocity")
                if oldBV then
                    oldBV:Destroy()
                end
            end
        end
    end

    local function handleFlight()
        while toggles.EnableFlight do
            local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
            local hrp = character and character:FindFirstChild("HumanoidRootPart")
            if hrp then
                camera = workspace.CurrentCamera
                local moveDirection = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + camera.CFrame.UpVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                    moveDirection = moveDirection - camera.CFrame.UpVector
                end
                if moveDirection.Magnitude > 0 then
                    moveDirection = moveDirection.Unit * options.FlightSpeed
                else
                    moveDirection = Vector3.new(0, 0, 0)
                end
                hrp.Velocity = moveDirection
            end
            task.wait()
        end
    end

    local function onCharacterAdded(character)
        character:WaitForChild("Humanoid")
        task.wait(0.5)
        if toggles.EnableSpeedHack then
            task.spawn(handleSpeedHack)
        end
    end
    localPlayer.CharacterAdded:Connect(onCharacterAdded)

    local function enableInfiniteJump()
        if infiniteJumpConnection then
            infiniteJumpConnection:Disconnect()
        end
        infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
            if getgenv().EnableInfiniteJump and localPlayer.Character then
                local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
    end
    
    local function disableInfiniteJump()
        if infiniteJumpConnection then
            infiniteJumpConnection:Disconnect()
            infiniteJumpConnection = nil
        end
    end

    Tabs.Main:CreateToggle({
        Name = "WalkSpeed",
        CurrentValue = false,
        Flag = "EnableSpeedHack",
        Callback = function(active)
            toggles.EnableSpeedHack = active
            if active then
                task.spawn(handleSpeedHack)
            else
                if localPlayer and localPlayer.Character then
                    local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.WalkSpeed = 16
                    end
                end
            end
        end,
    })

    Tabs.Main:CreateSlider({
        Name = "Speed",
        Range = {10, 300},
        Increment = 10,
        CurrentValue = 100,
        Flag = "Speed",
        Callback = function(value)
            options.Speed = value
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "Flight",
        CurrentValue = false,
        Flag = "EnableFlight",
        Callback = function(active)
            toggles.EnableFlight = active
            if active then
                task.spawn(handleFlight)
            else
                if localPlayer and localPlayer.Character then
                    local hrp = localPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.Velocity = Vector3.new(0, 0, 0)
                    end
                end
            end
        end,
    })

    Tabs.Main:CreateSlider({
        Name = "Flight Speed",
        Range = {10, 500},
        Increment = 10,
        CurrentValue = 100,
        Flag = "FlightSpeed",
        Callback = function(value)
            options.FlightSpeed = value
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "Infinite Jump",
        CurrentValue = false,
        Flag = "EnableInfiniteJump",
        Callback = function(active)
            getgenv().EnableInfiniteJump = active
            if active then
                enableInfiniteJump()
            else
                disableInfiniteJump()
            end
        end
    })

    Tabs.Main:CreateSection("Utilities")

    Tabs.Main:CreateToggle({
        Name = "Disable Oxygen/Temperature",
        CurrentValue = false,
        Flag = "DisablePeakEffects",
        Callback = function(Value)
            getgenv().DisablePeakEffects = Value
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "Infinite Oxygen",
        CurrentValue = false,
        Flag = "InfiniteOxygen",
        Callback = function(Value)
            getgenv().InfiniteOxygen = Value
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "AntiAFK",
        CurrentValue = false,
        Flag = "AntiAFK",
        Callback = function(Value)
            getgenv().AntiAFK = Value
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "NoAmbient",
        CurrentValue = false,
        Flag = "NoLocationCC",
        Callback = function(Value)
            getgenv().NoLocationCC = Value
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "NoClip",
        CurrentValue = false,
        Flag = "NoClip",
        Callback = function(enabled)
            if enabled then
                task.spawn(function()
                    getgenv().NoClipConn = RunService.Stepped:Connect(function()
                        local char = LocalPlayer.Character
                        if char then
                            for _, part in ipairs(char:GetDescendants()) do
                                if part:IsA("BasePart") then
                                    part.CanCollide = false
                                end
                            end
                        end
                    end)
                end)
            else
                if getgenv().NoClipConn then
                    getgenv().NoClipConn:Disconnect()
                    getgenv().NoClipConn = nil
                end
                local char = LocalPlayer.Character
                if char then
                    for _, part in ipairs(char:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = true
                        end
                    end
                end
            end
        end,
    })

    Tabs.Main:CreateToggle({
        Name = "Spam Tool",
        CurrentValue = false,
        Flag = "SpamTool",
        Callback = function(Value)
            getgenv().SpamTool = Value
        end,
    })

    local fullbrightEnabled = false
    local originalSettings = {}
    
    local function storeOriginalSettings()
        originalSettings = {
            Brightness = Lighting.Brightness,
            ClockTime = Lighting.ClockTime,
            GlobalShadows = Lighting.GlobalShadows,
            Ambient = Lighting.Ambient
        }
    end
    
    local function setFullbright(enabled)
        fullbrightEnabled = enabled
        if enabled then
            storeOriginalSettings()
        else
            if next(originalSettings) then
                Lighting.Brightness = originalSettings.Brightness
                Lighting.ClockTime = originalSettings.ClockTime
                Lighting.GlobalShadows = originalSettings.GlobalShadows
                Lighting.Ambient = originalSettings.Ambient
            end
        end
    end
    
    RunService.RenderStepped:Connect(function()
        if fullbrightEnabled then
            Lighting.Brightness = 5
            Lighting.ClockTime = 12
            Lighting.GlobalShadows = false
            Lighting.Ambient = Color3.new(1, 1, 1)
        end
    end)
    
    Tabs.Main:CreateToggle({
        Name = "Fullbright",
        CurrentValue = false,
        Flag = "FullbrightToggle",
        Callback = function(Value)
            setFullbright(Value)
        end
    })

    local noWeatherEnabled = false
    local function removeWeatherInstances()
        for _, instance in ipairs(Lighting:GetChildren()) do
            if instance:IsA("Sky") or instance:IsA("Atmosphere") then
                instance:Destroy()
            end
        end
    end
    
    local function setNoWeather(enabled)
        if enabled then
            Lighting.FogColor = Color3.fromRGB(255, 255, 255)
            Lighting.FogEnd = 1000000
            Lighting.FogStart = 0
            Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
            removeWeatherInstances()
        end
    end
    
    RunService.RenderStepped:Connect(function()
        if noWeatherEnabled then
            removeWeatherInstances()
        end
    end)
    
    Tabs.Main:CreateToggle({
        Name = "NoFog",
        CurrentValue = false,
        Flag = "NoFog",
        Callback = function(Value)
            noWeatherEnabled = Value
            setNoWeather(Value)
        end
    })

    Tabs.Main:CreateToggle({
        Name = "Infinite Zoom",
        CurrentValue = false,
        Flag = "InfZoom",
        Callback = function(val)
            if val then
                LocalPlayer.CameraMaxZoomDistance = 1000000
            else
                LocalPlayer.CameraMaxZoomDistance = 30
            end
        end
    })

    Tabs.Main:CreateSection("Merlin")

    local merlinAmount = 1

    Tabs.Main:CreateSlider({
        Name = "Item Amount",
        Range = {1, 50},
        Increment = 1,
        CurrentValue = 1,
        Flag = "MerlinAmount",
        Callback = function(Value)
            merlinAmount = Value
        end,
    })

    Tabs.Main:CreateButton({
        Name = "Buy Power",
        Callback = function()
            for i = 1, merlinAmount do
                task.spawn(function()
                    Remotes.Power:InvokeServer()
                end)
            end
        end,
    })

    Tabs.Main:CreateButton({
        Name = "Buy Luck",
        Callback = function()
            for i = 1, merlinAmount do
                task.spawn(function()
                    Remotes.Luck:InvokeServer()
                end)
            end
        end,
    })

    Tabs.Autos:CreateSection("Casting")

    Tabs.Autos:CreateToggle({
        Name = "AutoCast",
        CurrentValue = false,
        Flag = "AutoCast",
        Callback = function(Value)
            getgenv().AutoCast = Value
        end,
    })

    if not NO_HOOKING then
        Tabs.Autos:CreateToggle({
            Name = "Always Perfect",
            CurrentValue = false,
            Flag = "PerfectCast",
            Callback = function(Value)
                getgenv().PerfectCast = Value
            end,
        })
    end

    Tabs.Autos:CreateToggle({
        Name = "InstantBob",
        CurrentValue = false,
        Flag = "InstantBob",
        Callback = function(Value)
            getgenv().InstantBob = Value
        end,
    })

    Tabs.Autos:CreateSection("Reeling")

    Tabs.Autos:CreateToggle({
        Name = "Auto-reel",
        CurrentValue = false,
        Flag = "AutoReel",
        Callback = function(Value)
            getgenv().AutoReel = Value
            if Value then
                getgenv().InstantReel = false
            end
        end,
    })

    Tabs.Autos:CreateToggle({
        Name = "Insta-reel",
        CurrentValue = false,
        Flag = "InstantReel",
        Callback = function(Value)
            getgenv().InstantReel = Value
            if Value then
                getgenv().AutoReel = false
            end
        end,
    })

    Tabs.Autos:CreateToggle({
        Name = "Always Perfect",
        CurrentValue = false,
        Flag = "PerfectReel",
        Callback = function(Value)
            getgenv().PerfectReel = Value
        end,
    })

    Tabs.Autos:CreateSection("Shake")

    Tabs.Autos:CreateToggle({
        Name = "AutoShake",
        CurrentValue = false,
        Flag = "AutoShake",
        Callback = function(Value)
            getgenv().AutoShake = Value
        end,
    })

    Tabs.Autos:CreateToggle({
        Name = "CenterShake",
        CurrentValue = false,
        Flag = "CenterShake",
        Callback = function(Value)
            getgenv().CenterShake = Value
        end,
    })

    Tabs.Autos:CreateSection("Environmental")

    Tabs.Autos:CreateToggle({
        Name = "Auto-Meteor",
        CurrentValue = false,
        Flag = "AutoMeteor",
        Callback = function(Value)
            getgenv().AutoMeteor = Value
        end,
    })

    Tabs.Autos:CreateSection("Fishing")

    Tabs.Autos:CreateToggle({
        Name = "Zone-fish",
        CurrentValue = false,
        Flag = "ZoneFish",
        Callback = function(Value)
            getgenv().ZoneFish = Value
            if Value then
                getgenv().InfiniteOxygen = true
                ZoneFishOrigin = LocalPlayer.Character:GetPivot()
            else
                for _, State in next, Enum.HumanoidStateType:GetEnumItems() do
                    LocalPlayer.Character.Humanoid:SetStateEnabled(State, true)
                end
                if ZoneFishOrigin then
                    LocalPlayer.Character.Humanoid:UnequipTools()
                    for _ = 1, 10 do
                        task.wait()
                        Utils.TP(ZoneFishOrigin.Position)
                    end
                    ZoneFishOrigin = nil
                end
            end
        end,
    })

    local selectedZoneFish = FishingZones_DropDownValues[1] or "Ocean"

    Tabs.Autos:CreateDropdown({
        Name = "Select Zone",
        Options = FishingZones_DropDownValues,
        CurrentOption = FishingZones_DropDownValues[1] or "Ocean",
        Flag = "ZoneFishDropdown",
        Callback = function(Value)
            selectedZoneFish = Value
        end,
    })

    Tabs.Autos:CreateSection("Economy")

    Tabs.Autos:CreateToggle({
        Name = "Auto-sell",
        CurrentValue = false,
        Flag = "AutoSell",
        Callback = function(Value)
            getgenv().AutoSell = Value
        end,
    })

    Tabs.Teleports:CreateSection("Location Teleports")

    local TeleportOrigin
    local selectedTeleport = TeleportLocations_DropDownValues[1]

    Tabs.Teleports:CreateDropdown({
        Name = "Location",
        Options = TeleportLocations_DropDownValues,
        CurrentOption = TeleportLocations_DropDownValues[1],
        Flag = "TeleportsDropdown",
        Callback = function(Value)
            selectedTeleport = Value
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Teleport",
        Callback = function()
            local Position = TeleportLocations[selectedTeleport]
            if Position then
                TeleportOrigin = LocalPlayer.Character:GetPivot()
                Utils.TP(Position)
            end
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Go Back",
        Callback = function()
            if TeleportOrigin then
                Utils.TP(TeleportOrigin)
            else
                Utils.GenericToast(3, "No previous location stored!")
            end
        end,
    })

    Tabs.Teleports:CreateSection("Rod Teleports")

    local rodTeleportLocations = {
        ["Training Rod"] = CFrame.new(457.693848, 148.357529, 230.414307),
        ["Plastic Rod"] = CFrame.new(454.425385, 148.169739, 229.172424),
        ["Carbon Rod"] = CFrame.new(454.083618, 150.590073, 225.328827),
        ["Long Rod"] = CFrame.new(485.695038, 171.656326, 145.746109),
        ["Fast Rod"] = CFrame.new(447.183563, 148.225739, 220.187454),
        ["Lucky Rod"] = CFrame.new(446.085999, 148.253006, 222.1600),
        ["Steady Rod"] = CFrame.new(-1511.23523, 139.679504, 759.417114),
        ["Fortune Rod"] = CFrame.new(-1520.87964, 141.283279, 771.946777),
        ["Rapid Rod"] = CFrame.new(-1509.24463, 139.725906, 759.628174),
        ["Nocturnal Rod"] = CFrame.new(-141.874237, -515.313538, 1139.04529),
        ["Aurora Rod"] = CFrame.new(-141.874237, -515.313538, 1139.04529),
        ["Rod Of The Depths"] = CFrame.new(1689.9, -902.4, 1437.7),
        ["Magnet Rod"] = CFrame.new(-194.998871, 130.148087, 1930.97107),
        ["King's Rod"] = CFrame.new(1375.57642, -810.201721, -303.509247),
        ["Reinforced Rod"] = CFrame.new(-986.474365, -245.473938, -2689.79248),
        ["Trident Rod"] = CFrame.new(-1484.34192, -222.325562, -2194.77002),
        ["Scurvy Rod"] = CFrame.new(-2828.21851, 213.457199, 1512.20959),
        ["Phoenix Rod"] = CFrame.new(5971.03125, 270.377502, 852.372559),
        ["Heaven's Rod"] = CFrame.new(19980, 916, 5384),
        ["Summit Rod"] = CFrame.new(20207.7539, 736.058289, 5711.35156),
        ["Avalanche Rod"] = CFrame.new(19770.1816, 415.680969, 5419.19678),
        ["Ice Warper's Rod"] = CFrame.new(19965, 587, 5573),
        ["Arctic Rod"] = CFrame.new(19578.2363, 132.338379, 5307.38281),
        ["Abyssal Specter Rod"] = CFrame.new(-3804.09668, -566.402893, 1870.32849),
        ["Kraken Rod"] = CFrame.new(-4415.41699, -995.66217, 2054.45312),
        ["Depthseeker Rod"] = CFrame.new(-4466.24609, -596.11145, 1875.07166),
        ["Champions Rod"] = CFrame.new(-4277.4541, -602.719604, 1839.05908),
        ["Tempest Rod"] = CFrame.new(-4927.61865, -594.829651, 1856.89734),
        ["Zeus Rod"] = CFrame.new(-4270.84521, -626.403259, 2664.3479),
        ["Poseidon Rod"] = CFrame.new(-4086.14795, -557.409241, 895.166809),
        ["Ethereal Prism Rod"] = CFrame.new(-4359.83936, -11172.4326, 3718.91968),
        ["Leviathan's Fang Rod"] = CFrame.new(-2297.67651, -11185.3018, 7138.99023),
        ["Rod Of The Zenith"] = CFrame.new(-13625.1162, -11034.4316, 357.60199),
        ["Volcanic Rod"] = CFrame.new(-3178.24463, -2035.75085, 4021.57886),
        ["Brick Rod"] = CFrame.new(1321, 140, 1540),
        ["Crystalized Rod"] = CFrame.new(19240, 400, 6035),
    }

    local RodTeleportOrigin
    local rodDropdownValues = {}
    for friendlyName, _ in pairs(rodTeleportLocations) do
        table.insert(rodDropdownValues, friendlyName)
    end
    table.sort(rodDropdownValues)

    local selectedRod = rodDropdownValues[1]

    Tabs.Teleports:CreateDropdown({
        Name = "Rod",
        Options = rodDropdownValues,
        CurrentOption = rodDropdownValues[1],
        Flag = "RemoteShopDropdown",
        Callback = function(Value)
            selectedRod = Value
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Teleport to Rod",
        Callback = function()
            local targetCFrame = rodTeleportLocations[selectedRod]
            if targetCFrame then
                RodTeleportOrigin = LocalPlayer.Character:GetPivot()
                local offsetCFrame = targetCFrame * CFrame.new(0, 5, 0)
                Utils.TP(offsetCFrame)
            end
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Go Back (Rod)",
        Callback = function()
            if RodTeleportOrigin then
                Utils.TP(RodTeleportOrigin)
            else
                Utils.GenericToast(3, "No previous location stored!")
            end
        end,
    })

    Tabs.Teleports:CreateSection("Item Teleports")

    local itemTeleportLocations = {
        GPS = CFrame.new(517, 152, 284),
        Glider = CFrame.new(-1713, 149, 740),
        Pickaxe = CFrame.new(19783.1914, 415.743622, 5391.92041),
        ["Advanced Glider"] = CFrame.new(19939, 1142, 5544),
        ["Heart Of Zeus"] = CFrame.new(-2522, 138, 1593),
        Drill = CFrame.new(0, -85.39099884033203, 0),
        ["Crab Cage"] = CFrame.new(465, 150, 235),
        ["Conception Conch"] = CFrame.new(-145, -515, 1140),
        ["Common Crate"] = CFrame.new(-1140, 125, -1076),
        ["Sundial Totem"] = CFrame.new(-1215, 195, -1040),
        ["Tempest Totem"] = CFrame.new(20, 140, 1860),
        ["Windset Totem"] = CFrame.new(2845, 180, 2700),
        ["Smokescreen Totem"] = CFrame.new(2790, 140, -625),
        ["Meteor Totem"] = CFrame.new(-1945, 275, 230),
        ["Avalanche Totem"] = CFrame.new(19711, 468, 6059),
        ["Eclipse Totem"] = CFrame.new(5940, 265, 900),
        ["Blizzard Totem"] = CFrame.new(20148, 743, 5804),
        ["Aurora Totem"] = CFrame.new(-1810, -135, -3280),
        ["Cursed Storm Totem"] = CFrame.new(760, 2130, 16965),
        ["Zeus Storm Totem"] = CFrame.new(-4325, -625, 2685),
        ["Poseidon Wrath Totem"] = CFrame.new(-3955, -555, 855),
    }

    local ItemTeleportOrigin
    local itemDropdownValues = {}
    for friendlyName, _ in pairs(itemTeleportLocations) do
        table.insert(itemDropdownValues, friendlyName)
    end
    table.sort(itemDropdownValues)

    local selectedItem = itemDropdownValues[1]

    Tabs.Teleports:CreateDropdown({
        Name = "Item",
        Options = itemDropdownValues,
        CurrentOption = itemDropdownValues[1],
        Flag = "ItemShop",
        Callback = function(Value)
            selectedItem = Value
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Teleport to Item",
        Callback = function()
            local targetCFrame = itemTeleportLocations[selectedItem]
            if targetCFrame then
                ItemTeleportOrigin = LocalPlayer.Character:GetPivot()
                local offsetCFrame = targetCFrame * CFrame.new(0, 5, 0)
                Utils.TP(offsetCFrame)
            end
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Go Back (Item)",
        Callback = function()
            if ItemTeleportOrigin then
                Utils.TP(ItemTeleportOrigin)
            else
                Utils.GenericToast(3, "No previous location stored!")
            end
        end,
    })

    Tabs.Teleports:CreateSection("Quest Teleports")

    local questTeleportLocations = {
        ["Lost Rod"] = CFrame.new(2930, 130, 2620),
        ["Roslit Brick"] = CFrame.new(-1844, 194.5, 196.1),
        ["Ancient Isles Brick"] = CFrame.new(5959, 269, 850),
        ["The Depths Brick"] = CFrame.new(989, -734, 1136),
        ["Blue Energy Crystal"] = CFrame.new(20125, 211, 5450),
        ["Green Energy Crystal"] = CFrame.new(19870, 448, 5555),
        ["Yellow Energy Crystal"] = CFrame.new(19500, 335, 5550),
        ["Red Energy Crystal"] = CFrame.new(19920, 1140, 5350),
        ["Button 1"] = CFrame.new(400, 136, 265),
        ["Button 2"] = CFrame.new(-1716, 149, 732),
        ["Button 3"] = CFrame.new(-2566, 181, 1353),
        ["Button 4"] = CFrame.new(2930, 281, 2594),
        ["Button 5"] = CFrame.new(5506, 147, -315),
        ["TNT Lever 1"] = CFrame.new(-2522, 138, 1593),
        ["TNT Lever 2"] = CFrame.new(-2551, 150, 1667),
        ["TNT Lever 3"] = CFrame.new(-2729, 168, 1730),
        ["TNT Lever 4"] = CFrame.new(-2881, 314, 1605),
        ["TNT Lever 5"] = CFrame.new(-2835, 131, 1510),
    }

    local questTeleportOrigin
    local questDropdownValues = {}
    for friendlyName, _ in pairs(questTeleportLocations) do
        table.insert(questDropdownValues, friendlyName)
    end
    table.sort(questDropdownValues)

    local selectedQuest = questDropdownValues[1]

    Tabs.Teleports:CreateDropdown({
        Name = "Quest",
        Options = questDropdownValues,
        CurrentOption = questDropdownValues[1],
        Flag = "QuestLocations",
        Callback = function(Value)
            selectedQuest = Value
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Teleport to Quest",
        Callback = function()
            local targetCFrame = questTeleportLocations[selectedQuest]
            if targetCFrame then
                questTeleportOrigin = LocalPlayer.Character:GetPivot()
                local offsetCFrame = targetCFrame * CFrame.new(0, 5, 0)
                Utils.TP(offsetCFrame)
            end
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Go Back (Quest)",
        Callback = function()
            if questTeleportOrigin then
                Utils.TP(questTeleportOrigin)
            else
                Utils.GenericToast(3, "No previous location stored!")
            end
        end,
    })

    Tabs.Teleports:CreateSection("NPC Teleports")

    local npcTeleportLocations = {
        ["Jack Marrow"] = CFrame.new(-2830, 215, 1518),
        Merchant = CFrame.new(466, 151, 225),
        ["Skin Merchant"] = CFrame.new(415, 135, 190),
        Angler = CFrame.new(480, 150, 295),
        Shipwright = CFrame.new(360, 135, 260),
        ["Inn Keeper"] = CFrame.new(490, 150, 245),
        Submariner = CFrame.new(-3355, -2270, 3800),
        ["Egg Salesman"] = CFrame.new(375, 135, 320),
        ["Sea Traveler"] = CFrame.new(140, 150, 2030),
        ["Lantern Keeper"] = CFrame.new(710, 165, 335),
        Phineas = CFrame.new(470, 150, 275),
        ["Captain Ahab"] = CFrame.new(362, 133, 294),
        Alfie = CFrame.new(-1515, 141, 765),
        Ashe = CFrame.new(-1705, 150, 735),
        ["Dr Glimmerfin"] = CFrame.new(-1320, 130, 300),
        Orc = CFrame.new(-1850, 165, 160),
        Wilson = CFrame.new(2935, 280, 2565),
        Merlin = CFrame.new(-928, 224, -998),
        Silas = CFrame.new(1545, 1690, 6310),
        Agaric = CFrame.new(2595, 130, -725),
        Synth = CFrame.new(-145, -515, 1140),
        ["The Keeper"] = CFrame.new(20, -705, 1255),
        Caleia = CFrame.new(980, 130, -1235),
        Minish = CFrame.new(-1322, 140, 1543),
        Chiseler = CFrame.new(6087, 195, 294),
        Meteoriticist = CFrame.new(5922, 262, 596),
        Hiker = CFrame.new(19526, 132, 5236),
        ["Bubble Mermaid"] = CFrame.new(-3550, 130, 568),
        ["Captain Neptune"] = CFrame.new(-3820, 135, 575),
        ["Dr. Crookspine"] = CFrame.new(-1915, 225, -530),
    }

    local npcTeleportOrigin
    local npcDropdownValues = {}
    for friendlyName, _ in pairs(npcTeleportLocations) do
        table.insert(npcDropdownValues, friendlyName)
    end
    table.sort(npcDropdownValues)

    local selectedNPC = npcDropdownValues[1]

    Tabs.Teleports:CreateDropdown({
        Name = "NPC",
        Options = npcDropdownValues,
        CurrentOption = npcDropdownValues[1],
        Flag = "npcCoords",
        Callback = function(Value)
            selectedNPC = Value
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Teleport to NPC",
        Callback = function()
            local targetCFrame = npcTeleportLocations[selectedNPC]
            if targetCFrame then
                npcTeleportOrigin = LocalPlayer.Character:GetPivot()
                local offsetCFrame = targetCFrame * CFrame.new(0, 5, 0)
                Utils.TP(offsetCFrame)
            end
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Go Back (NPC)",
        Callback = function()
            if npcTeleportOrigin then
                Utils.TP(npcTeleportOrigin)
            else
                Utils.GenericToast(3, "No previous location stored!")
            end
        end,
    })

    Tabs.Teleports:CreateSection("Server Teleports")

    Tabs.Teleports:CreateButton({
        Name = "Rejoin",
        Callback = function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Hop Random",
        Callback = function()
            local smallestServerId
            local smallestCount = math.huge
            local cursor = ""
            repeat
                local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)
                if cursor and cursor ~= "" then
                    url = url .. "&cursor=" .. cursor
                end
                local response = game:HttpGet(url)
                local data = HttpService:JSONDecode(response)
                for _, server in ipairs(data.data) do
                    if server.playing < server.maxPlayers and server.playing < smallestCount then
                        smallestCount = server.playing
                        smallestServerId = server.id
                    end
                end
                cursor = data.nextPageCursor or ""
            until cursor == "" or smallestServerId
            if smallestServerId then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, smallestServerId, LocalPlayer)
            end
        end,
    })

    Tabs.Teleports:CreateButton({
        Name = "Hop Smallest",
        Callback = function()
            local servers = {}
            local cursor = ""
            repeat
                local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)
                if cursor and cursor ~= "" then
                    url = url .. "&cursor=" .. cursor
                end
                local response = game:HttpGet(url)
                local data = HttpService:JSONDecode(response)
                for _, server in ipairs(data.data) do
                    if server.playing < server.maxPlayers then
                        table.insert(servers, server.id)
                    end
                end
                cursor = data.nextPageCursor or ""
            until cursor == "" or #servers > 0
            if #servers > 0 then
                local randomServerId = servers[math.random(1, #servers)]
                TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServerId, LocalPlayer)
            end
        end,
    })

    Tabs.Misc:CreateSection("Performance")

    Tabs.Misc:CreateToggle({
        Name = "No Fish Models",
        CurrentValue = false,
        Flag = "DestroyFish",
        Callback = function(Value)
            getgenv().DestroyFish = Value
        end,
    })

    Tabs.Misc:CreateToggle({
        Name = "Disable Rendering",
        CurrentValue = false,
        Flag = "DisableRendering",
        Callback = function(Value)
            RunService:Set3dRenderingEnabled(not Value)
        end,
    })

    Tabs.Misc:CreateToggle({
        Name = "Disable Inventory",
        CurrentValue = false,
        Flag = "DisableInventory",
        Callback = function(Value)
            getgenv().DisableInventory = Value
            pcall(function()
                if Interface.Inventory then
                    Interface.Inventory.Visible = not Value
                end
                StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, not Value)
            end)
        end,
    })

    Tabs.Misc:CreateSection("Gameplay Disruption")

    Tabs.Misc:CreateToggle({
        Name = "Lag/Crash Server",
        CurrentValue = false,
        Flag = "ServerStresser",
        Callback = function(Value)
            getgenv().ServerStresser = Value
            if not Value then
                TeleportService:Teleport(game.PlaceId, LocalPlayer)
            else
                Utils.TP(LocalPlayer.Character:GetPivot().Position + Vector3.new(0, 9e9, 0))
            end
        end,
    })

    setthreadidentity(7)

    Utils.BoatsChanged()

    Collect(workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
        Camera = workspace.CurrentCamera
    end))

    Collect(Interface.PlayerData.Boats.AncestryChanged:Connect(Utils.BoatsChanged))

    Collect(workspace:WaitForChild("active").ChildAdded:Connect(function(Child)
        if Child:IsA("Model") then
            local Fish = Child:WaitForChild("Fish", 1)
            if Fish then
                if getgenv().DestroyFish then
                    task.wait()
                    Child:Destroy()
                end
            end
        end
    end))

    Collect(Interface.Inventory:GetPropertyChangedSignal("Visible"):Connect(function()
        if getgenv().DisableInventory and Interface.Inventory.Visible == true then
            task.wait()
            Interface.Inventory.Visible = false
        end
    end))

    Collect(Interface.MeteorItems.ChildAdded:Connect(function(Item)
        if getgenv().AutoMeteor then
            State.GettingMeteor = true
            local Origin = LocalPlayer.Character:GetPivot()
            local Prompt = WaitForTable(Item, {"Center", "prompt"}, 5)
            local Center = Prompt.Parent
            local TPConnection = RunService.PostSimulation:Connect(function()
                Utils.TP(Center:GetPivot() - (Vector3.yAxis * 5))
            end)
            task.delay(2, function()
                fireproximityprompt(Prompt)
            end)
            task.delay(4, function()
                TPConnection:Disconnect()
                Utils.TP(Origin)
                State.GettingMeteor = false
            end)
        end
    end))

    if not NO_HOOKING then
        local oldindex
        oldindex = hookmetamethod(game, "__index", function(...)
            if not Unloaded then
                if not checkcaller() then
                    local Args = {...}
                    local self, key = Args[1], Args[2]
                    if self == Interface.Inventory and key == "Visible" then
                        local callingscript = getcallingscript()
                        if callingscript and (not game.IsDescendantOf(callingscript, Interface.Inventory)) then
                            return true
                        end
                    end
                end
            end
            return oldindex(...)
        end)

        local oldnamecall
        oldnamecall = hookmetamethod(game, "__namecall", function(...)
            if not Unloaded then
                if not checkcaller() then
                    local Method = getnamecallmethod()
                    local Args = {...}
                    local self = table.remove(Args, 1)
                    if Method == "FireServer" then
                        if self == Remotes.ReelFinished then
                            if getgenv().PerfectReel then
                                Args[1] = 100
                                Args[2] = true
                            end
                        elseif tostring(self) == "cast" then
                            if getgenv().PerfectCast then
                                Args[1] = 100
                            end
                        end
                        return oldnamecall(self, unpack(Args))
                    end
                end
            end
            return oldnamecall(...)
        end)
    end

    local ShopUpdateCoroutine = coroutine.create(function()
        while task.wait(1) do
            if getgenv().AutoSell then
                pcall(function()
                    Remotes.SellAll:InvokeServer()
                end)
            end
        end
    end)

    local AutoClickCoroutine = coroutine.create(function()
        function Utils.MountShakeUI(ShakeUI)
            local SafeZone = ShakeUI:WaitForChild("safezone", 5)
            local function HandleButton(Button)
                Button.Selectable = true
                if EnsureInstance(Button) then
                    GuiService.SelectedObject = Button
                end
            end

            if not SafeZone then
                dbgwarn("Unable to mount shake UI.")
                return
            end

            if getgenv().CenterShake then
                local Connect = SafeZone:WaitForChild("connect", 1)
                if Connect then
                    Connect.Enabled = false
                end
                SafeZone.Size = UDim2.fromOffset(0, 0)
                SafeZone.Position = UDim2.fromScale(0.5, 0.5)
                SafeZone.AnchorPoint = Vector2.new(0.5, 0.5)
            end

            if getgenv().AutoShake then
                local Connection = SafeZone.ChildAdded:Connect(function(Child)
                    if not Child:IsA("ImageButton") then
                        return
                    end
                    
                    if replicatesignal then
                        replicatesignal(Child.MouseButton1Click)
                        task.delay(0.05, function()
                            Child:Destroy()
                        end)
                        return
                    end
                    
                    local Done = false
                    task.spawn(function()
                        repeat
                            RunService.Heartbeat:Wait()
                            HandleButton(Child)
                        until Done
                    end)
                    task.spawn(function()
                        repeat
                            RunService.Heartbeat:Wait()
                        until (not Child) or (not Child:IsDescendantOf(SafeZone))
                        Done = true
                    end)
                end)

                if replicatesignal then
                    return
                end
                
                repeat
                    RunService.Heartbeat:Wait()
                    if GuiService.SelectedObject and GuiService.SelectedObject:IsDescendantOf(SafeZone) then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    end
                    RunService.Heartbeat:Wait()
                until not SafeZone:IsDescendantOf(LocalPlayer.PlayerGui)
                Connection:Disconnect()
                GuiService.SelectedObject = nil
            end
        end

        Collect(LocalPlayer.PlayerGui.ChildAdded:Connect(function(Child)
            if Child.Name == "shakeui" and Child:IsA("ScreenGui") then
                Utils.MountShakeUI(Child)
            end
        end))
    end)

    local AutoReelCoroutine = coroutine.create(function()
        while true do
            RunService.RenderStepped:Wait()
            local ReelUI = LocalPlayer.PlayerGui:FindFirstChild("reel")
            if not ReelUI then
                continue
            end

            if getgenv().InstantReel then
                local Bar = ReelUI:FindFirstChild("bar")
                if Bar then
                    local ReelScript = Bar:FindFirstChild("reel")
                    if ReelScript and ReelScript.Enabled == true then
                        Remotes.ReelFinished:FireServer(100, getgenv().PerfectReel)
                    end
                end
            elseif getgenv().AutoReel then
                local Bar = ReelUI:FindFirstChild("bar")
                if not Bar then
                    continue
                end

                local PlayerBar = Bar:FindFirstChild("playerbar")
                local TargetBar = Bar:FindFirstChild("fish")
                while Bar and ReelUI:IsDescendantOf(LocalPlayer.PlayerGui) do
                    RunService.RenderStepped:Wait()
                    local UnfilteredTargetPosition = PlayerBar.Position:Lerp(TargetBar.Position, 0.7)
                    local TargetPosition = UDim2.fromScale(
                        math.clamp(UnfilteredTargetPosition.X.Scale, 0.15, 0.85),
                        UnfilteredTargetPosition.Y.Scale
                    )
                    PlayerBar.Position = TargetPosition
                end
            end
        end
    end)

    local AutoCastCoroutine = coroutine.create(function()
        local LastCastAttempt = 0
        while task.wait(0.5) do
            if getgenv().AutoCast then
                pcall(function()
                    if not CurrentTool then
                        return
                    end

                    local Values = CurrentTool:FindFirstChild("values")
                    if CurrentTool and Values then
                        local Events = CurrentTool:FindFirstChild("events")
                        if Values:FindFirstChild("bite") and Values.bite.Value == true and Values.casted.Value == true then
                            if (not LocalPlayer.PlayerGui:FindFirstChild("reel")) and tick() - LastCastAttempt > 5 then
                                ResetTool()
                            end
                        end

                        if Utils.CountInstances(LocalPlayer.PlayerGui, "reel") > 1 then
                            ResetTool()
                            for _, Child in next, LocalPlayer.PlayerGui:GetChildren() do
                                if Child.Name == "reel" then
                                    Child:Destroy()
                                end
                            end
                        end

                        if Values.casted.Value == false then
                            LastCastAttempt = tick()
                            local AnimationFolder = ReplicatedStorage:WaitForChild("resources"):WaitForChild("animations")
                            local CastAnimation = LocalPlayer.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.throw)
                            CastAnimation.Priority = Enum.AnimationPriority.Action3
                            CastAnimation:Play()
                            Events.cast:FireServer(100, 1)

                            CastAnimation.Stopped:Once(function()
                                CastAnimation:Destroy()
                                local WaitingAnimation = LocalPlayer.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.waiting)
                                WaitingAnimation.Priority = Enum.AnimationPriority.Action3
                                WaitingAnimation:Play()

                                local UnequippedLoop, CastConnection
                                CastConnection = Values.casted.Changed:Once(function()
                                    WaitingAnimation:Stop()
                                    WaitingAnimation:Destroy()
                                    coroutine.close(UnequippedLoop)
                                end)

                                UnequippedLoop = coroutine.create(function()
                                    repeat
                                        task.wait()
                                    until not CurrentTool
                                    WaitingAnimation:Stop()
                                    WaitingAnimation:Destroy()
                                    CastConnection:Disconnect()
                                end)
                                coroutine.resume(UnequippedLoop)
                            end)
                        end
                    end
                end)
            end
        end
    end)

    local ServerStressCoroutine = coroutine.create(function()
        local Backpack = LocalPlayer.Backpack
        local function IsFish(Tool)
            return Tool:FindFirstChild("fishscript") or (Tool:GetAttribute("IsFish") == true)
        end

        while task.wait(5) do
            if not getgenv().ServerStresser then
                continue
            end

            for i, Tool in next, Backpack:GetChildren() do
                task.spawn(function()
                    if IsFish(Tool) then
                        Tool:SetAttribute("IsFish", true)
                        local FishModel = Tool:FindFirstChild("Fish")
                        if FishModel then
                            FishModel:Destroy()
                        end
                        Tool.Parent = LocalPlayer.Character
                    end
                end)
            end
            LocalPlayer.Character.Humanoid:UnequipTools()
        end
    end)

    Collect(RunService.RenderStepped:Connect(function()
        pcall(function()
            if Interface.Inventory and Interface.Inventory.Visible then
                Interface.Inventory.Visible = not getgenv().DisableInventory
                StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, not getgenv().DisableInventory)
            end
        end)

        if getgenv().SpamTool then
            if CurrentTool then
                for i = 20, 1, -1 do
                    CurrentTool:Activate()
                end
            end
        end

        if getgenv().NoLocationCC then
            Utils.ToggleLocationCC(false)
        else
            Utils.ToggleLocationCC(true)
        end
    end))

    Collect(RunService.PostSimulation:Connect(function()
        if getgenv().ZoneFish then
            if State.GettingMeteor then
                return
            end

            for _, Part in next, LocalPlayer.Character:GetDescendants() do
                if Part:IsA("BasePart") then
                    Part.CanTouch = false
                    Part.AssemblyLinearVelocity = Vector3.zero
                    Part.AssemblyAngularVelocity = Vector3.zero
                end
            end

            local Zone = FishingZones[selectedZoneFish]
            if Zone then
                local Origin = Zone:GetPivot()
                Utils.TP(Origin - Vector3.new(0, 20, 0))

                if CurrentTool then
                    local Bobber = CurrentTool:FindFirstChild("bobber")
                    if Bobber then
                        local Rope = Bobber:FindFirstChildOfClass("RopeConstraint")
                        if Rope then
                            Rope.Length = 9e9
                        end
                        Bobber:PivotTo(Origin)
                    end
                end
            end
        elseif getgenv().InstantBob then
            if CurrentTool then
                local Bobber = CurrentTool:FindFirstChild("bobber")
                if Bobber then
                    local Params = RaycastParams.new()
                    Params.FilterType = Enum.RaycastFilterType.Include
                    Params.FilterDescendantsInstances = {workspace.Terrain}
                    local RaycastResult = workspace:Raycast(Bobber.Position, -Vector3.yAxis * 100, Params)
                    if RaycastResult then
                        if RaycastResult.Instance:IsA("Terrain") then
                            Bobber:PivotTo(CFrame.new(RaycastResult.Position))
                        end
                    end
                end
            end
        end
    end))

    Collect(LocalPlayer.Idled:Connect(function()
        if getgenv().AntiAFK then
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end))

    coroutine.resume(ServerStressCoroutine)
    coroutine.resume(AutoClickCoroutine)
    coroutine.resume(AutoReelCoroutine)
    coroutine.resume(AutoCastCoroutine)
    coroutine.resume(ShopUpdateCoroutine)
    Collect(ServerStressCoroutine)
    Collect(AutoClickCoroutine)
    Collect(AutoReelCoroutine)
    Collect(AutoCastCoroutine)
    Collect(ShopUpdateCoroutine)

    Collect(LocalPlayer.CharacterAdded:Connect(Utils.CharacterAdded))

    OnUnload.Event:Once(function()
        for _, PersistentModel in next, CollectionService:GetTagged("ForcePersistent") do
            if PersistentModel:GetAttribute("OldStreamingMode") then
                local OldStreamingMode = PersistentModel:GetAttribute("OldStreamingMode")
                PersistentModel.ModelStreamingMode = Enum.ModelStreamingMode[OldStreamingMode]
            else
                PersistentModel.ModelStreamingMode = Enum.ModelStreamingMode.Default
            end
            CollectionService:RemoveTag(PersistentModel, "ForcePersistent")
            PersistentModel:SetAttribute("OldStreamingMode", nil)
        end
    end)

    if LocalPlayer.Character then
        Utils.CharacterAdded(LocalPlayer.Character)
    end

    Rayfield:LoadConfiguration()
    print("Eco Hub loaded successfully!")
end)

if not Success then
    warn("Eco Hub Error:", Error)
end
